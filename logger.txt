import os
import logging
from logging.handlers import TimedRotatingFileHandler
from config import LOG_PATH, LOG_FILE
from colorama import init, Fore, Style

# Initialize colorama for Windows support
init()

class ColoredFormatter(logging.Formatter):
    """Custom formatter with colors for different log levels"""
    
    COLORS = {
        'DEBUG': Fore.WHITE,
        'INFO': Fore.BLUE,
        'SUCCESS': Fore.GREEN,
        'WARNING': Fore.YELLOW,
        'ERROR': Fore.RED,
        'CRITICAL': Fore.RED + Style.BRIGHT
    }

    def format(self, record):
        # Add SUCCESS level color if message starts with "Success" or "Successfully"
        if record.levelno == logging.INFO and (
            record.msg.startswith('Success') or 
            record.msg.startswith('Successfully')
        ):
            color = self.COLORS['SUCCESS']
        else:
            color = self.COLORS.get(record.levelname, Fore.WHITE)
        
        # Color the entire message including timestamp
        record.msg = f"{color}{record.msg}{Style.RESET_ALL}"
        
        # Add color to level name
        record.levelname = f"{color}{record.levelname}{Style.RESET_ALL}"
        
        return super().format(record)

def setup_logger():
    """Configure logger with custom format and rotation while suppressing other loggers"""
    
    # Suppress all other loggers
    logging.getLogger().handlers = []  # Remove root logger handlers
    logging.getLogger('py4j').setLevel(logging.ERROR)  # Suppress py4j logs
    logging.getLogger('pyspark').setLevel(logging.ERROR)  # Suppress pyspark logs
    
    # Create logs directory if it doesn't exist
    if not os.path.exists(LOG_PATH):
        os.makedirs(LOG_PATH)
    
    # Create logger
    logger = logging.getLogger('ETLLogger')
    logger.setLevel(logging.INFO)
    
    # Prevent the log messages from being propagated to the root logger
    logger.propagate = False
    
    # Remove any existing handlers
    if logger.hasHandlers():
        logger.handlers.clear()
    
    # Create formatters
    file_formatter = logging.Formatter(
        '%(asctime)s | %(levelname)s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    console_formatter = ColoredFormatter(
        '%(asctime)s | %(levelname)s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # Create rotating file handler (without colors)
    file_handler = TimedRotatingFileHandler(
        os.path.join(LOG_PATH, LOG_FILE),
        when='midnight',
        interval=1,
        backupCount=30,  # Keep logs for 30 days
        encoding='utf-8'
    )
    file_handler.setFormatter(file_formatter)
    file_handler.setLevel(logging.INFO)
    
    # Create console handler (with colors)
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(console_formatter)
    console_handler.setLevel(logging.INFO)
    
    # Add handlers to logger
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    return logger

# Usage example:
# logger = setup_logger()
# logger.info("Basic info message")  # Blue
# logger.info("Successfully completed task")  # Green
# logger.warning("Warning message")  # Yellow/Orange
# logger.error("Error message")  # Red
